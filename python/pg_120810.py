# 파이썬 코딩테스트 연습 기록

## 1. 문제 정보
# - **문제 링크:** https://school.programmers.co.kr/learn/courses/30/lessons/120810  
# - **난이도:** 하  
# - **카테고리:** 연산  
# - **제한 시간:** 1초  
# - **메모리 제한:** 128MB  

## 2. 문제 설명
# - **요약:** 두 정수 `num1`과 `num2`가 주어졌을 때, `num1`을 `num2`로 나눈 나머지를 구하는 문제  
# - **목표:** `solution` 함수에서 `num1 % num2` 결과를 반환  
# - **제약 조건:**  
#   - 0 < num1 ≤ 100  
#   - 0 < num2 ≤ 100  

## 3. 입출력 예시
### 입력 예시
# ```
# 3 2
# ```
# ### 출력 예시
# ```
# 1
# ```
### 추가 테스트 케이스
# - **테스트 케이스 1:**
#   - 입력: `100 3`
#   - 기대 출력: `1`
#   - 설명: 큰 수에 대해서도 올바른 나머지를 구하는지 검증

# - **경계 케이스:**
#   - 입력: `100 100`
#   - 기대 출력: `0`
#   - 설명: 두 수가 같을 때 나머지가 0이 되는지 확인

## 4. 접근 방법
# - **초기 아이디어:** 파이썬의 `%` 연산자를 사용  
# - **알고리즘 선택 이유:** `%` 연산자는 하드웨어 레벨에서 상수 시간(O(1))에 처리  
# - **자료구조 선택 이유:** 별도 자료구조 불필요  

## 5. 해결 과정
### 1단계: 문제 분석
# - 입력받은 두 정수에 대해 나머지를 구해야 함  
# - 입력 범위가 작아 특별한 예외 처리 불필요  

### 2단계: 알고리즘 설계
# 1. `num1`, `num2`를 입력받는다.  
# 2. `num1 % num2`를 계산하여 `answer`에 저장한다.  
# 3. `answer`를 반환한다.  

### 3단계: 코드 구현
# ```python
def solution(num1, num2):
    # num1을 num2로 나눈 나머지를 계산
    answer = num1 % num2
    return answer

if __name__ == "__main__":
    # 공백으로 구분된 두 정수를 입력받아 solution 함수 결과 출력
    num1, num2 = map(int, input().split())
    print(solution(num1, num2))
# ```

## 7. 대체 해결 방법
### 방법 1: 반복 뺄셈
# ```python
def solution(num1, num2):
    # num1에서 num2를 반복해서 빼며 나머지 계산
    while num1 >= num2:
        num1 -= num2
    return num1
# ```
# - **장점:** `%` 연산자 없이도 구현 가능  
# - **단점:** num1이 클 경우 반복 횟수가 많아져 비효율  
# - **시간 복잡도:** O(num1/num2)  
# - **공간 복잡도:** O(1)  

## 8. 코드 최적화
# - 이미 상수 시간 연산이므로 추가 최적화 불필요  

## 9. 복잡도 분석
### 시간 복잡도
# - **최악/평균/최선:** O(1)  

### 공간 복잡도
# - **최악의 경우:** O(1)  
# - **추가 사용 공간:** 상수 개수의 변수  

## 13. 실행 시간 및 메모리 사용량
# - **실행 시간:** 0.1ms (샘플 기준)  
# - **메모리 사용량:** 10MB (샘플 기준)  
# - **시스템 환경:** Python 3.9, 1초/128MB  

## 16. 회고 및 학습 포인트
# - **배운 점:** `%` 연산자를 이용한 나머지 계산 방법  
# - **개선 가능 영역:** 언어별로 달라지는 음수 나머지 처리 방식  
# - **다음 계획:** 제약 조건에 맞춰 기본 연산 활용 가능 여부 우선 확인하기